set encoding=utf-8
set tags=./tags,tags,./.git/tags;$HOME
set clipboard=unnamed
set mouse=a
set hlsearch
set incsearch
set ignorecase
set smartcase
set noeb vb t_vb=
set statusline=%<%f\ %h%m%r%{FugitiveStatusline()}%=%-14.(%l,%c%V%)\ %P
hi StatusLine ctermbg=29 ctermfg=white
let g:netrw_liststyle = 3

set background=dark
colorscheme lucius
let g:lucius_high_contrast_bg = 1
let g:lucius_use_bold = 1

if has("gui_running")
  set vb t_vb=
  set linespace=3
  set guifont=Fira\ Code\ Light:h12
  " set guifont=Monaco:h12
  set background=dark
  colorscheme one
endif

" automatically rebalance windows on resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" simplify netrw
let g:netrw_banner = 0

" Display relative line numbers 
set number
set numberwidth=5
set relativenumber

" enable indent folding
set foldenable
set foldmethod=indent
set foldlevel=999

" Enable matchit for better navigating
runtime macros/matchit.vim

" Enable this for textobj-rubyblock
if has("autocmd")
  filetype indent plugin on
endif

" Remove whitespace at end of lines
autocmd BufWritePre *.erb,*.scss,*.rb,*.js,*.c,*.py,*.php :%s/\s\+$//e

" use C-Space to Esc any mode
nnoremap <C-Space> <Esc>:noh<CR>
vnoremap <C-Space> <Esc>gV
onoremap <C-Space> <Esc>
cnoremap <C-Space> <C-c>
inoremap <C-Space> <Esc>
" terminal sees <C-@> as <C-space>
nnoremap <C-@> <Esc>:noh<CR>
vnoremap <C-@> <Esc>gV
onoremap <C-@> <Esc>
cnoremap <C-@> <C-c>
inoremap <C-@> <Esc>

" move highlighted line up or down using option + hjkl
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

" convenience
nnoremap <leader>; :

" move between wrapped lines
nmap j gj
nmap k gk

" swap 0 and ^. I tend to want to jump to the first non-whitespace character
" so make that the easier one to do.
nnoremap 0 ^
nnoremap ^ 0

" ctrl+r to replace highlighted text in entire document
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

" CtrlP fuzzy buffer
nnoremap ; :CtrlPBuffer<CR>

" setup CtrlSF for searching in project
nnoremap \ :CtrlSF<SPACE>
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
let g:ctrlsf_mapping = {
    \ "next": "n",
    \ "prev": "N",
    \ }

" s toggles folds, S toggles folds recursively
nnoremap s za
nnoremap S zA

" [f]old [u]p, [u]n[f]old
nnoremap <leader>fu zM<cr>
nnoremap <leader>uf zR<cr>

" autoindent new lines with C-Return
imap <C-Return> <CR><CR><C-o>k<Tab>

let g:test#strategy = "dispatch"

" Lint erb correctly
call ale#linter#Define('eruby', {
 \   'name': 'erubylint',
 \   'executable': 'erb',
 \   'output_stream': 'stderr',
 \   'command': "ruby -rerb -e \"puts ERB.new(File.read(%t, encoding: 'BINARY').gsub('<%=','<%'), nil, '-').src\" | ruby -c",
 \   'callback': 'ale#handlers#ruby#HandleSyntaxErrors',
 \})
let g:ale_linters = {
\  'javascript': ['eslint'],
\  'jsx': ['eslint']
\}
let g:ale_fixers = {
\  'javascript': ['eslint'],
\  'jsx': ['eslint']
\}
let g:ale_javascript_eslint_use_global = 1

let g:ctrlp_match_window = 'top,min:1,max:5,results:10'

" leader space
nnoremap <leader>got <c-w>gf
nnoremap <leader>c :cclose<cr>
map <leader>gw :!git add . && git commit -m 'WIP' && git push<cr>
map <leader>sc :sp db/schema.rb<cr>
map <leader>n :tabe .project_notes<cr>

" Scrolling mods I'm not in love with yet
map <leader>d Lzt<cr>
map <leader>u HzbH<cr>

" Start autocompletion after 4 chars
let g:ycm_min_num_of_chars_for_completion = 4
let g:ycm_min_num_identifier_candidate_chars = 4
let g:ycm_enable_diagnostic_highlighting = 0
" Don't show YCM's preview window [ I find it really annoying ]
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0
" vim:ft=vim
