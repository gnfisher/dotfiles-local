set encoding=utf-8
set tags=./tags,tags,./.git/tags;$HOME
set clipboard=unnamed
set mouse=a
set hlsearch
set incsearch
set ignorecase
set smartcase
set autoread
set noeb vb t_vb=
set statusline=%<%f\ %h%m%r%{FugitiveStatusline()}%=%-14.(%l,%c%V%)\ %P
let g:netrw_banner = 0
set number
set nofoldenable
set foldmethod=manual
" Cursor Styles
let &t_SI.="\e[5 q"
let &t_SR.="\e[4 q"
let &t_EI.="\e[1 q"
" Enable this for textobj-rubyblock
if has("autocmd")
  filetype indent plugin on
endif
" Remove whitespace at end of lines
autocmd BufWritePre *.erb,*.scss,*.rb,*.js,*.c,*.py,*.php,*.coffee :%s/\s\+$//e
" Don't jump to first character in line
" Show next 10 lines while scrolling
if !&scrolloff
  set scrolloff=10
endif
" Show next 5 columns while side-scrolling
if !&sidescrolloff
  set sidescrolloff=5
endif
hi StatusLine ctermbg=16 ctermfg=251
" Gui vs Terminal
if has("gui_running")
  set linespace=2
else
  syntax on

  " For Dracula
  " set termguicolors
  " let g:dracula_italic = 0
  " set background=dark
  " colorscheme dracula

  " For light theme
  set background=light
  hi Visual cterm=NONE ctermbg=255 ctermfg=NONE guibg=Grey40
endif

" automatically rebalance windows on resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Enable matchit for better navigating
runtime macros/matchit.vim

" use C-Space to Esc any mode
nnoremap <C-Space> <Esc>:noh<CR>
vnoremap <C-Space> <Esc>gV
onoremap <C-Space> <Esc>
cnoremap <C-Space> <C-c>
inoremap <C-Space> <Esc>
" terminal sees <C-@> as <C-space>
nnoremap <C-@> <Esc>:noh<CR>
vnoremap <C-@> <Esc>gV
onoremap <C-@> <Esc>
cnoremap <C-@> <C-c>
inoremap <C-@> <Esc>

" convenience
nnoremap <leader>; :

" move between wrapped lines
nmap j gj
nmap k gk

" swap 0 and ^. I tend to want to jump to the first non-whitespace character
" so make that the easier one to do.
nnoremap 0 ^
nnoremap ^ 0

let test#strategy = 'vtr'
" let test#strategy = {
"       \ 'nearest': 'dispatch',
"       \ 'file':    'dispatch',
"       \ 'last':    'dispatch',
"       \ 'suite':   'vtr',
"       \}
let g:test#javascript#jest#options = '--reporters jest-vim-reporter'

" lint erb correctly
call ale#linter#Define('eruby', {
 \   'name': 'erubylint',
 \   'executable': 'erb',
 \   'output_stream': 'stderr',
 \   'command': "ruby -rerb -e \"puts ERB.new(File.read(%t, encoding: 'BINARY').gsub('<%=','<%'), nil, '-').src\" | ruby -c",
 \   'callback': 'ale#handlers#ruby#HandleSyntaxErrors',
 \})
let g:ale_linters = {
\  'javascript': ['eslint'],
\  'jsx': ['eslint']
\}
let g:ale_fixers = {
\  'javascript': ['eslint'],
\  'jsx': ['eslint']
\}

" Typescript ALE integration
let g:ale_linters_ignore = { 'typescript': ['tslint'] }

call ale#Set('typescript_tsserver_executable', 'tsserver')
call ale#Set('typescript_tsserver_config_path', '')
call ale#Set('typescript_tsserver_use_global', get(g:, 'ale_use_global_executables', 0))

call ale#linter#Define('typescript', {
\   'name': 'tsserver',
\   'lsp': 'tsserver',
\   'executable': {b -> ale#node#FindExecutable(b, 'typescript_tsserver', [
\       'Users/greg/.asdf/shims/tsserver',
\   ])},
\   'command': '%e',
\   'project_root': function('ale#handlers#tsserver#GetProjectRoot'),
\   'language': '',
\})

let g:EasyGrepCommand = 1

" Quick search file for highlighred word
vnoremap // y/<C-R>"<CR>

" leader space
" close all cut current buffer
nnoremap <leader>bo :BufOnly<cr>
nnoremap <leader>got <c-w>gf
nnoremap <leader>c :cclose<cr>
nnoremap <leader>` :vsp ~/Notes/scratch.md<cr>

" Maps ctrl+p to open fuzzy search via FZF
nnoremap <c-p> :Files<cr>
nnoremap ; :Buffers<CR>

" show hidden files and hide gitignored files
" let $FZF_DEFAULT_COMMAND = 'ag --files --hidden'

nnoremap <leader>ga :Files app/<cr>
nnoremap <leader>gm :Files app/models/<cr>
nnoremap <leader>gv :Files app/views/<cr>
nnoremap <leader>gc :Files app/controllers/<cr>
nnoremap <leader>gy :Files app/assets/stylesheets/<cr>
nnoremap <leader>gj :Files app/assets/javascripts/<cr>
nnoremap <leader>gs :Files spec/<cr>

nnoremap <leader>ap :VtrAttachToPane 2<cr>

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], [preview window], [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Bat: https://github.com/sharkdp/bat
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
" vim:ft=vim
