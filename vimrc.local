" automatically rebalance windows on resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Use C-Space to Esc any mode
nnoremap <C-Space> <Esc>:noh<CR>
vnoremap <C-Space> <Esc>gV
onoremap <C-Space> <Esc>
cnoremap <C-Space> <C-c>
inoremap <C-Space> <Esc>
" Terminal sees <C-@> as <C-space>
nnoremap <C-@> <Esc>:noh<CR>
vnoremap <C-@> <Esc>gV
onoremap <C-@> <Esc>
cnoremap <C-@> <C-c>
inoremap <C-@> <Esc>


" Appearance
syntax enable
" set background=light
colorscheme jellybeans

let g:netrw_banner = 0

" Remove whitespace at end of lines
autocmd BufWritePre *.erb,*.scss,*.rb,*.js,*.c,*.py,*.php :%s/\s\+$//e

" Display relative line numbers 
set number
set numberwidth=5
set relativenumber

" Move between wrapped lines
nmap j gj
nmap k gk

" Enable matchit for better navigating
runtime macros/matchit.vim

" Enable this for textobj-rubyblock
if has("autocmd")
  filetype indent plugin on
endif

" Source open file, quickly reload vimrc etc
nnoremap <leader>sop :source %<cr>

nnoremap <leader>; :

" Swap 0 and ^. I tend to want to jump to the first non-whitespace character
" so make that the easier one to do.
nnoremap 0 ^
nnoremap ^ 0

" Search and replace settings
" ---------------------------

set hlsearch
set incsearch
set ignorecase
set smartcase
nnoremap <leader>sub :%s///g<left><left>
vnoremap <leader>sub :s///g<left><left>

" Folding
" -------

"Enable indent folding
set foldenable
set foldmethod=indent
set foldlevel=999

" So I never use s, and I want a single key map to toggle folds, thus
" lower s = toggle <=> upper S = toggle recursive
nnoremap <leader>ff za
nnoremap <leader>FF zA

"Maps for folding, unfolding all
nnoremap <LEADER>fu zM<CR>
nnoremap <LEADER>uf zR<CR>

nnoremap <leader>vo :VtrOpenRunner<cr>
nnoremap <leader>va :VtrAttachToPane<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>

nnoremap <leader>q :VtrSendCommandToRunner q<cr>

let g:test#strategy = "vtr"
let g:test#runner_commands = ["RSpec"]

" Lint erb correctly
call ale#linter#Define('eruby', {
 \   'name': 'erubylint',
 \   'executable': 'erb',
 \   'output_stream': 'stderr',
 \   'command': "ruby -rerb -e \"puts ERB.new(File.read(%t, encoding: 'BINARY').gsub('<%=','<%'), nil, '-').src\" | ruby -c",
 \   'callback': 'ale#handlers#ruby#HandleSyntaxErrors',
 \})

" vim:ft=vim
