syntax enable
set encoding=utf-8
set tags=./tags,tags,./.git/tags;$HOME
set clipboard=unnamed
set mouse=a
set hlsearch
set incsearch
set ignorecase smartcase
set autoread
set noeb vb t_vb=
set number
set numberwidth=1
set diffopt=vertical
:set updatetime=1000
set complete=.,w,b,u,t,i
:set completeopt=menu,preview
set nofoldenable
set foldmethod=manual
set nojoinspaces
set wildmode=list:longest,list:full
set wildmenu
set scrolloff=10
set sidescrolloff=5

" statusline
:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

if has("autocmd")
  filetype indent plugin on
  " json
  autocmd! FileType json set sw=2 sts=2 expandtab

  " elm indentation
  autocmd! FileType elm set sw=4 sts=4 expandtab autoindent smartindent nocindent

  " Remove whitespace at end of lines
  autocmd BufWritePre *.erb,*.scss,*.rb,*.js,*.c,*.py,*.php,*.coffee :%s/\s\+$//e

  au BufRead,BufNewFile *.sbt set filetype=scala
endif

" Enable matchit for better navigating
runtime macros/matchit.vim

" use C-Space to Esc any mode
nnoremap <C-Space> <Esc>:noh<CR>
vnoremap <C-Space> <Esc>gV
onoremap <C-Space> <Esc>
cnoremap <C-Space> <C-c>
inoremap <C-Space> <Esc>
" terminal sees <C-@> as <C-space>
nnoremap <C-@> <Esc>:noh<CR>
vnoremap <C-@> <Esc>gV
onoremap <C-@> <Esc>
cnoremap <C-@> <C-c>
inoremap <C-@> <Esc>

" convenience
nnoremap <leader>; :

" move between wrapped lines
nmap j gj
nmap k gk

" User VTR for vim-test
let g:VtrUseVtrMaps = 1
nnoremap <leader>rar :VtrReattachRunner<cr>
nnoremap <leader>rap :VtrAttachToPane 2<cr>
let test#strategy = 'vtr'
let g:test#javascript#jest#options = '--reporters jest-vim-reporter'
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" lint erb correctly
" call ale#linter#Define('eruby', {
"  \   'name': 'erubylint',
"  \   'executable': 'erb',
"  \   'output_stream': 'stderr',
"  \   'command': "ruby -rerb -e \"puts ERB.new(File.read(%t, encoding: 'BINARY').gsub('<%=','<%'), nil, '-').src\" | ruby -c",
"  \   'callback': 'ale#handlers#ruby#HandleSyntaxErrors',
"  \})
" let g:ale_sign_error = '>>'
" let g:ale_sign_warning = '--'
" let g:ale_set_highlights = 0

" fzf
nnoremap <C-p> :Files<CR>
nnoremap <leader>gp :Files<cr>
nnoremap <leader>gb :Buffers<CR>
nnoremap <leader>gt :Tag<cr>
nnoremap <leader>go :BTag<cr>
nnoremap <leader>ga :Files app/<cr>
nnoremap <leader>gm :Files app/models/<cr>
nnoremap <leader>gv :Files app/views/<cr>
nnoremap <leader>gc :Files app/controllers/<cr>
nnoremap <leader>gy :Files app/assets/stylesheets/<cr>
nnoremap <leader>gj :Files app/assets/javascripts/<cr>
nnoremap <leader>gs :Files spec/<cr>

" nnoremap <leader>gw :call fzf#vim#tags(expand('<cword>'))<cr>

" shortcut to open files
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" ripgrep
nnoremap \ :Rg<space>
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:40%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:40%:hidden', '?'),
\ <bang>0)

nnoremap <leader>sub :%s///g<left><left>
vnoremap <leader>sub :s///g<left><left>
" break long arguments onto separate lines
vnoremap <leader>j :s/\((\zs\\|,\ *\zs\\|)\)/\r&/g<CR><Bar>:'[,']normal ==<CR>

" CoC config
set updatetime=300
set shortmess+=c
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-tag> to trigger completion.
inoremap <silent><expr> <c-tab> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" noremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>d  :<C-u>CocList diagnostics<cr>

set background=light
