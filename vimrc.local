set t_Co=256
map <leader>bb :!bundle install<cr>
set guifont=Monaco\ 11
set tags=./tags,tags,./.git/tags;$HOME
set clipboard=unnamed

" automatically rebalance windows on resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

let g:netrw_banner = 0

" Remove whitespace at end of lines
autocmd BufWritePre *.erb,*.scss,*.rb,*.js,*.c,*.py,*.php :%s/\s\+$//e

" Display relative line numbers 
set number
set numberwidth=5
set relativenumber

" Move between wrapped lines
nmap j gj
nmap k gk

" Enable matchit for better navigating
runtime macros/matchit.vim

" Enable this for textobj-rubyblock
if has("autocmd")
  filetype indent plugin on
endif

" Source open file, quickly reload vimrc etc
nnoremap <leader>sop :source %<cr>

nnoremap <leader>; :

" Swap 0 and ^. I tend to want to jump to the first non-whitespace character
" so make that the easier one to do.
nnoremap 0 ^
nnoremap ^ 0

" Search and replace settings
" ---------------------------

set hlsearch
set incsearch
set ignorecase
set smartcase
nnoremap <leader>sub :%s///g<left><left>
vnoremap <leader>sub :s///g<left><left>

nnoremap \ :CtrlSF<SPACE>
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
let g:ctrlsf_mapping = {
    \ "next": "n",
    \ "prev": "N",
    \ }

" Folding
" -------

"Enable indent folding
set foldenable
set foldmethod=indent
set foldlevel=999

" So I never use s, and I want a single key map to toggle folds, thus
" lower s = toggle <=> upper S = toggle recursive
" nnoremap <leader>ff za
" nnoremap <leader>FF zA
nnoremap s za
nnoremap S zA

"Maps for folding, unfolding all
nnoremap <leader>fu zM<cr>
nnoremap <leader>uf zR<cr>

" Autoindent new lines with C-Return
imap <C-Return> <CR><CR><C-o>k<Tab>
let g:test#strategy = "dispatch"
" let g:test#runner_commands = ["RSpec"]

" Lint erb correctly
call ale#linter#Define('eruby', {
 \   'name': 'erubylint',
 \   'executable': 'erb',
 \   'output_stream': 'stderr',
 \   'command': "ruby -rerb -e \"puts ERB.new(File.read(%t, encoding: 'BINARY').gsub('<%=','<%'), nil, '-').src\" | ruby -c",
 \   'callback': 'ale#handlers#ruby#HandleSyntaxErrors',
 \})

let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

set completeopt=preview,menuone

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_auto_trigger = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutFastWrap = "<c-e>"
let g:AutoPairsShortcutBackInsert= "<c-b>"

" bind K to grep word under cursor
" nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" My leader space
nnoremap <leader>got <c-w>gf
nnoremap <leader>c :cclose<cr>
map <leader>gw :!git add . && git commit -m 'WIP' && git push<cr>
map <leader>sc :sp db/schema.rb<cr>
map <leader>n :vsp .project_notes<cr>
map <leader>d Lzt<cr>
map <leader>u HzbH<cr>

set background=light
colorscheme one
" colorscheme jellybeans

" Use C-Space to Esc any mode
nnoremap <C-Space> <Esc>:noh<CR>
vnoremap <C-Space> <Esc>gV
onoremap <C-Space> <Esc>
cnoremap <C-Space> <C-c>
inoremap <C-Space> <Esc>
" Terminal sees <C-@> as <C-space>
nnoremap <C-@> <Esc>:noh<CR>
vnoremap <C-@> <Esc>gV
onoremap <C-@> <Esc>
cnoremap <C-@> <C-c>
inoremap <C-@> <Esc>

" vim:ft=vim
